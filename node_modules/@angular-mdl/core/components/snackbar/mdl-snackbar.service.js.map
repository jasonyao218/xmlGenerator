{"version":3,"sources":["../../../src/lib/components/snackbar/mdl-snackbar.service.ts"],"names":[],"mappings":"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","file":"mdl-snackbar.service.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Injectable,\n  ComponentRef,\n  ComponentFactoryResolver,\n  NgModule,\n  ViewEncapsulation,\n  ModuleWithProviders, ComponentFactory\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MdlDialogOutletService } from '../dialog-outlet/mdl-dialog-outlet.service';\nimport { MdlDialogOutletModule } from '../dialog-outlet/index';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n\nconst ANIMATION_TIME = 250;\n\n\nexport class MdlSnackbarComponent {\n  public message: string;\n  public actionText: string;\n  public showIt = false;\n  public onAction: () => void;\n\n  constructor(){}\n\n  public onClick() {\n    this.onAction();\n  }\n\n  public isActive() {\n    return this.showIt;\n  }\n\n  public show(): Observable<void> {\n    let result: Subject<any> = new Subject();\n    // wait unit the dom is in place - then showIt will change the css class\n    setTimeout(() => {\n      this.showIt = true;\n      // fire after the view animation is done\n      setTimeout(() => {\n        result.next(null);\n        result.complete();\n      }, ANIMATION_TIME);\n    }, ANIMATION_TIME);\n\n\n    return result.asObservable();\n  }\n\n  public hide(): Observable<void> {\n    this.showIt = false;\n\n    let result: Subject<any> = new Subject();\n\n    // fire after the view animation is done\n    setTimeout(() => {\n      result.next(null);\n      result.complete();\n    }, ANIMATION_TIME);\n\n\n    return result.asObservable();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'mdl-snackbar-component',\n  template: `\n    <div id=\"demo-toast-example\" class=\" mdl-snackbar\" [ngClass]=\"{'mdl-snackbar--active': showIt }\">\n      <div class=\"mdl-snackbar__text\">{{message}}</div>\n      <button *ngIf=\"onAction\" class=\"mdl-snackbar__action\" type=\"button\" (click)=\"onClick()\" >{{actionText}}</button>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nexport interface IMdlSnackbarMessage {\n  message: string;\n  timeout?: number;\n  closeAfterTimeout?: boolean;\n  action?: {\n    handler: () => void;\n    text: string;\n  };\n}\n\n\nexport class MdlSnackbarService {\n\n  private cFactory: ComponentFactory<any>;\n  private previousSnack: {component: MdlSnackbarComponent, cRef: ComponentRef<any>};\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private dialogOutletService: MdlDialogOutletService) {\n    this.cFactory  = this.componentFactoryResolver.resolveComponentFactory(MdlSnackbarComponent);\n  }\n\n\n  public showToast(message: string, timeout?: number): Observable<MdlSnackbarComponent> {\n    return this.showSnackbar({\n      message: message,\n      timeout: timeout\n    });\n  }\n\n  public showSnackbar(snackbarMessage: IMdlSnackbarMessage): Observable<MdlSnackbarComponent> {\n\n    let optTimeout        = snackbarMessage.timeout || 2750;\n    let closeAfterTimeout = !!snackbarMessage.closeAfterTimeout;\n    let viewContainerRef  = this.dialogOutletService.viewContainerRef;\n\n    if (!viewContainerRef) {\n      throw new Error('You did not provide a ViewContainerRef. ' +\n        'Please see https://github.com/mseemann/angular2-mdl/wiki/How-to-use-the-MdlDialogService');\n    }\n\n    let cRef = viewContainerRef.createComponent(this.cFactory, viewContainerRef.length);\n\n    let mdlSnackbarComponent = <MdlSnackbarComponent> cRef.instance;\n    mdlSnackbarComponent.message = snackbarMessage.message;\n\n    if(this.previousSnack) {\n      let previousSnack = this.previousSnack;\n      let subscription = previousSnack.component.hide()\n        .subscribe(() => {\n          previousSnack.cRef.destroy();\n          subscription.unsubscribe();\n        });\n    }\n\n    this.previousSnack = {\n      component: mdlSnackbarComponent,\n      cRef: cRef\n    };\n\n    if (snackbarMessage.action) {\n      if(closeAfterTimeout) {\n        this.hideAndDestroySnack(mdlSnackbarComponent, cRef, optTimeout)\n      }\n      mdlSnackbarComponent.actionText = snackbarMessage.action.text;\n      mdlSnackbarComponent.onAction = () => {\n        mdlSnackbarComponent.hide().subscribe(() => {\n          cRef.destroy();\n          snackbarMessage.action.handler();\n        });\n      };\n    } else {\n      this.hideAndDestroySnack(mdlSnackbarComponent, cRef, optTimeout)\n    }\n\n    let result: Subject<MdlSnackbarComponent> = new Subject<MdlSnackbarComponent>();\n\n    mdlSnackbarComponent.show().subscribe( () => {\n      result.next(mdlSnackbarComponent);\n      result.complete();\n    });\n\n    return result.asObservable();\n  }\n\n  private hideAndDestroySnack(component, componentRef, timeOut) {\n    setTimeout( () => {\n      component.hide()\n        .subscribe(() => {\n          componentRef.destroy();\n        });\n    }, timeOut);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: MdlDialogOutletService, },\n];\n}\n\n\nexport class MdlSnackbaModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdlSnackbaModule,\n      providers: [MdlSnackbarService]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdlDialogOutletModule.forRoot()],\n  exports: [MdlSnackbarComponent],\n  declarations: [MdlSnackbarComponent],\n  entryComponents: [MdlSnackbarComponent]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}