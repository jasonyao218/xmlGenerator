{"version":3,"sources":["../../../src/lib/components/dialog-outlet/mdl-dialog-outlet.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAoB,UAAA,EAAY,cAAA,EAAgB,wBAAA,EAA0B,YAAA,EAAa,MAAO,eAAA,CAAgB;AACrH,OAAO,EAAE,wBAAA,EAAyB,MAAO,+BAAA,CAAgC;AACzE,OAAO,EAAE,2BAAA,EAA4B,MAAO,kCAAA,CAAmC;AAI/E;IAOE,gCACU,MAAsB,EACtB,wBAAkD;QADlD,WAAM,GAAN,MAAM,CAAgB;QACtB,6BAAwB,GAAxB,wBAAwB,CAA0B;QAJrD,yBAAoB,GAAsB,IAAI,YAAY,EAAE,CAAC;QAKlE,IAAI,mBAAmB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC;YACH,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACxE,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,0EAA0E;QAC5E,CAAC;QACD,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAEM,2DAA0B,GAAjC,UAAkC,KAAuB;QACvD,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,sBAAW,oDAAgB;aAA3B;YACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC;;;OAAA;IAEO,oDAAmB,GAA3B,UAA4B,KAAuB;QAAnD,iBAUC;QATC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAE/B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC3B,IAAI,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,2BAA2B,CAAC,CAAC;YAClG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;YACnF,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,SAAS,CAAE;gBAC7C,KAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;YACnC,CAAC,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAEM,6CAAY,GAAnB;QACE,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;IAChC,CAAC;IAEM,uDAAsB,GAA7B,UAA8B,MAAc;QAC1C,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IASH,6BAAC;AAAD,CAxDA,AAwDC;;AARM,iCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,qCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;IACxB,EAAC,IAAI,EAAE,wBAAwB,GAAG;CACjC,EAH6F,CAG7F,CAAC","file":"mdl-dialog-outlet.service.js","sourceRoot":"","sourcesContent":["import { ViewContainerRef, Injectable, ApplicationRef, ComponentFactoryResolver, EventEmitter } from '@angular/core';\nimport { MdlDialogOutletComponent } from './mdl-dialog-outlet.component';\nimport { MdlBackdropOverlayComponent } from './mdl-backdrop-overlay.component';\n\n\n\nexport class MdlDialogOutletService {\n\n  private viewContainerRef_: ViewContainerRef;\n  private backdropComponent: MdlBackdropOverlayComponent;\n\n  public backdropClickEmitter: EventEmitter<any> = new EventEmitter();\n\n  constructor(\n    private appRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver) {\n    let dialogOutletCompRef = null;\n    try {\n      dialogOutletCompRef = this.appRef.bootstrap(MdlDialogOutletComponent);\n    } catch (e) {\n      // the user did not use the dialog.outlet element outside of his root app.\n    }\n    if (dialogOutletCompRef) {\n      this.setViewContainerRef(dialogOutletCompRef.instance.viewContainerRef);\n    }\n  }\n\n  public setDefaultViewContainerRef(vCRef: ViewContainerRef) {\n    this.setViewContainerRef(vCRef);\n  }\n\n  public get viewContainerRef(): ViewContainerRef {\n    return this.viewContainerRef_;\n  }\n\n  private setViewContainerRef(value: ViewContainerRef) {\n    this.viewContainerRef_ = value;\n\n    if (this.viewContainerRef_) {\n      let cFactory = this.componentFactoryResolver.resolveComponentFactory(MdlBackdropOverlayComponent);\n      this.backdropComponent = this.viewContainerRef_.createComponent(cFactory).instance;\n      this.backdropComponent.clickEmitter.subscribe( () => {\n        this.backdropClickEmitter.emit();\n      })\n    }\n  }\n\n  public hideBackdrop() {\n    this.backdropComponent.hide();\n  }\n\n  public showBackdropWithZIndex(zIndex: number) {\n    this.backdropComponent.showWithZIndex(zIndex);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ApplicationRef, },\n{type: ComponentFactoryResolver, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}